datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  firebaseUID String?
  displayName String?
  photoURL    String?
  authType    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  Expense  Expense[]
  Accounts Account[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String  @id @default(cuid())
  title String
  body  String
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  Expense   Expense? @relation(fields: [expenseId], references: [id])
  expenseId String?
}

model Expense {
  id             String        @id @default(cuid())
  expense_id     Int           @default(autoincrement())
  title          String
  products       Json[]
  vendor         Vendor?       @relation(fields: [vendorId], references: [id])
  category       String?
  expenseAccount String
  type           String
  txn_amount     Float
  balance        Float
  remarks        String?
  notes          Note[]
  status         ExpenseStatus
  payHistory     PayHistory[]
  statusHistory  Json[]
  company        String
  site           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  vendorId String
}

model Vendor {
  id      String    @id @default(cuid())
  name    String
  address String?
  phone   String?
  email   String?
  remarks String?
  account String?
  Expense Expense[]
}

enum ExpenseStatus {
  DRAFT
  REVIEWED
  APPROVED
  REJECTED
  PAID
}

model PayHistory {
  id          String   @id @default(cuid())
  bankAcct    String
  paymentDate DateTime
  memo        String
  paidAmount  Float
  date        DateTime
  payer       String
  Expense     Expense? @relation(fields: [expenseId], references: [id])
  expenseId   String?
}

model Account {
  id            Int           @id @default(autoincrement())
  name          String
  accountNumber String        @unique @db.VarChar(10)
  balance       Float         @default(0)
  accountType   AccountType   @default(BASIC)
  status        AccountStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  User          User          @relation(fields: [userId], references: [id])
  Transactions  Transaction[]
}

enum AccountStatus {
  PENDING
  APPROVED
}

enum AccountType {
  BASIC
  PREMIUM
  // Add other types as needed
}

model Transaction {
  id                 Int               @id @default(autoincrement())
  amount             Float
  direction          Direction
  transType          TransactionType
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  accountId          Int
  Account            Account           @relation(fields: [accountId], references: [id])
  charges            Float
  destinationBank    String?
  destinationAccount String?
  bankId             String?
  Bank               Bank?             @relation(fields: [bankId], references: [id])
  status             TransactionStatus @default(PENDING)
}

enum Direction {
  IN
  OUT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  REVERSED
  DECLINED
}

enum TransactionType {
  DEPOSIT
  TRANSFER
}

model Bank {
  id           String        @id @default(cuid())
  name         String
  code         String        @unique
  // Other fields as necessary...
  Transactions Transaction[]
}
